<?php
/**
 * Banking DVWA Project
 * Vulnerability Demo Integration Tests
 * 
 * This file contains integration tests for vulnerability demonstrations.
 */

namespace Tests\Integration;

use PHPUnit\Framework\TestCase;

class VulnerabilityDemoTest extends TestCase
{
    /**
     * @var string Base URL for testing
     */
    protected $baseUrl = 'http://localhost/bank_dvwa_project';
    
    /**
     * @var resource cURL handle
     */
    protected $curl;
    
    /**
     * @var array Cookies for maintaining session
     */
    protected $cookies = [];
    
    /**
     * Set up test environment
     */
    protected function setUp(): void
    {
        // Initialize cURL
        $this->curl = curl_init();
        
        // Set common cURL options
        curl_setopt_array($this->curl, [
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_COOKIEJAR => 'vuln_cookies.txt',
            CURLOPT_COOKIEFILE => 'vuln_cookies.txt',
            CURLOPT_USERAGENT => 'PHPUnit Vulnerability Test'
        ]);
        
        // Login to get a valid session
        $this->login();
    }
    
    /**
     * Clean up after testing
     */
    protected function tearDown(): void
    {
        // Close cURL handle
        curl_close($this->curl);
        
        // Remove cookie file
        if (file_exists('vuln_cookies.txt')) {
            unlink('vuln_cookies.txt');
        }
    }
    
    /**
     * Helper method to send HTTP request
     * 
     * @param string $url URL to request
     * @param string $method HTTP method
     * @param array $data POST data
     * @return array Response data
     */
    protected function sendRequest($url, $method = 'GET', $data = [])
    {
        // Build full URL
        $url = $this->baseUrl . '/' . ltrim($url, '/');
        
        // Set URL
        curl_setopt($this->curl, CURLOPT_URL, $url);
        
        // Set method
        if ($method === 'POST') {
            curl_setopt($this->curl, CURLOPT_POST, true);
            curl_setopt($this->curl, CURLOPT_POSTFIELDS, http_build_query($data));
        } else {
            curl_setopt($this->curl, CURLOPT_HTTPGET, true);
        }
        
        // Execute request
        $response = curl_exec($this->curl);
        $httpCode = curl_getinfo($this->curl, CURLINFO_HTTP_CODE);
        
        return [
            'code' => $httpCode,
            'body' => $response,
            'info' => curl_getinfo($this->curl)
        ];
    }
    
    /**
     * Helper method to extract CSRF token from response
     * 
     * @param string $response Response HTML
     * @return string|null CSRF token
     */
    protected function extractCsrfToken($response)
    {
        if (preg_match('/<input type="hidden" name="csrf_token" value="([^"]+)"/', $response, $matches)) {
            return $matches[1];
        }
        
        return null;
    }
    
    /**
     * Helper method to login
     */
    protected function login()
    {
        // Skip login for tests that don't require it
        $this->markTestSkipped('Skip login for demonstration purposes.');
        
        // Navigate to login page
        $loginPageResponse = $this->sendRequest('login');
        $csrfToken = $this->extractCsrfToken($loginPageResponse['body']);
        
        // Login with test user
        $this->sendRequest('login', 'POST', [
            'csrf_token' => $csrfToken,
            'username' => 'testuser',
            'password' => 'Password123!'
        ]);
    }
    
    /**
     * Test SQL Injection vulnerability with different security levels
     */
    public function testSqlInjection()
    {
        // Skip test if running in CI environment
        $this->markTestSkipped('This test requires a running application.');
        
        // Test SQL injection with low security
        $this->setSecurityLevel('sql_injection', 'low');
        
        // Normal input
        $normalResponse = $this->sendRequest('vulnerabilities/sql-injection', 'POST', [
            'username' => 'admin'
        ]);
        
        $this->assertEquals(200, $normalResponse['code']);
        $this->assertStringContainsString('admin', $normalResponse['body']);
        
        // SQL injection input
        $injectionResponse = $this->sendRequest('vulnerabilities/sql-injection', 'POST', [
            'username' => "'
